{
  "id": "b294938c-1a4a-48f1-a79e-5f9f13be7f03",
  "prevId": "87b5f94b-3d34-4b0a-bf31-abc4c7c86522",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.definitions": {
      "name": "definitions",
      "schema": "",
      "columns": {
        "term": {
          "name": "term",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "definition": {
          "name": "definition",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "public.embeddings": {
      "name": "embeddings",
      "schema": "",
      "columns": {
        "point_id": {
          "name": "point_id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "embedding": {
          "name": "embedding",
          "type": "vector(384)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "embeddings_point_id_points_id_fk": {
          "name": "embeddings_point_id_points_id_fk",
          "tableFrom": "embeddings",
          "tableTo": "points",
          "columnsFrom": [
            "point_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "public.endorsements": {
      "name": "endorsements",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "cred": {
          "name": "cred",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "point_id": {
          "name": "point_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "endorsements_user_id_index": {
          "name": "endorsements_user_id_index",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "endorsements_point_id_index": {
          "name": "endorsements_point_id_index",
          "columns": [
            {
              "expression": "point_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "endorsements_point_id_points_id_fk": {
          "name": "endorsements_point_id_points_id_fk",
          "tableFrom": "endorsements",
          "tableTo": "points",
          "columnsFrom": [
            "point_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "endorsements_user_id_users_id_fk": {
          "name": "endorsements_user_id_users_id_fk",
          "tableFrom": "endorsements",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "public.negations": {
      "name": "negations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "older_point_id": {
          "name": "older_point_id",
          "type": "serial",
          "primaryKey": false,
          "notNull": true
        },
        "newer_point_id": {
          "name": "newer_point_id",
          "type": "serial",
          "primaryKey": false,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "olderPointIndex": {
          "name": "olderPointIndex",
          "columns": [
            {
              "expression": "older_point_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "newerPointIndex": {
          "name": "newerPointIndex",
          "columns": [
            {
              "expression": "newer_point_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "negations_older_point_id_points_id_fk": {
          "name": "negations_older_point_id_points_id_fk",
          "tableFrom": "negations",
          "tableTo": "points",
          "columnsFrom": [
            "older_point_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "negations_newer_point_id_points_id_fk": {
          "name": "negations_newer_point_id_points_id_fk",
          "tableFrom": "negations",
          "tableTo": "points",
          "columnsFrom": [
            "newer_point_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "negations_created_by_users_id_fk": {
          "name": "negations_created_by_users_id_fk",
          "tableFrom": "negations",
          "tableTo": "users",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "uniqueNegation": {
          "name": "uniqueNegation",
          "nullsNotDistinct": false,
          "columns": [
            "older_point_id",
            "newer_point_id"
          ]
        }
      },
      "checkConstraints": {
        "olderPointFirst": {
          "name": "olderPointFirst",
          "value": "\"negations\".\"older_point_id\" < \"negations\".\"newer_point_id\""
        }
      }
    },
    "public.points": {
      "name": "points",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "keywords": {
          "name": "keywords",
          "type": "text[]",
          "primaryKey": false,
          "notNull": true,
          "default": "ARRAY[]::text[]"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "username": {
          "name": "username",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "cred": {
          "name": "cred",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 200
        }
      },
      "indexes": {
        "usernameUniqueIndex": {
          "name": "usernameUniqueIndex",
          "columns": [
            {
              "expression": "lower(\"username\")",
              "asc": true,
              "isExpression": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "noNegativeCred": {
          "name": "noNegativeCred",
          "value": "\"users\".\"cred\" >= 0"
        },
        "usernameFormat": {
          "name": "usernameFormat",
          "value": "LENGTH(\"users\".\"username\") BETWEEN 3 AND 15\n          AND \"users\".\"username\" ~ '^[a-zA-Z0-9][_a-zA-Z0-9]*[a-zA-Z0-9]$'"
        }
      }
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "views": {
    "public.point_with_stats_view": {
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "created_by": {
          "name": "created_by",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        }
      },
      "definition": "select \"id\", \"content\", \"created_at\", \"created_by\", \n        COALESCE((\n          SELECT COUNT(*)\n          FROM (\n            SELECT older_point_id AS point_id FROM \"negations\"\n            UNION ALL\n            SELECT newer_point_id AS point_id FROM \"negations\"\n          ) sub\n          WHERE point_id = \"points\".id\n        ), 0)\n       as \"amount_negations\", \n        COALESCE((\n          SELECT COUNT(DISTINCT \"user_id\")\n          FROM \"endorsements\"\n          WHERE \"point_id\" = \"points\".id\n        ), 0)\n       as \"amount_supporters\", \n        COALESCE((\n          SELECT SUM(\"cred\")\n          FROM \"endorsements\"\n          WHERE \"point_id\" = \"points\".id\n        ), 0)\n       as \"cred\", \n        COALESCE((\n          SELECT SUM(\"cred\")\n          FROM \"endorsements\"\n          WHERE \"point_id\" IN (\n            SELECT newer_point_id\n            FROM \"negations\"\n            WHERE older_point_id = \"points\".id\n            UNION\n            SELECT older_point_id\n            FROM \"negations\"\n            WHERE newer_point_id = \"points\".id\n          )\n        ), 0)\n       as \"negations_cred\" from \"points\"",
      "name": "point_with_stats_view",
      "schema": "public",
      "isExisting": false,
      "materialized": false
    },
    "public.point_favor_history": {
      "columns": {},
      "definition": "with \"all_events\" as ((((select \"id\" as point_id, \"created_at\" as event_time from \"points\") union (select \"point_id\" as point_id, \"created_at\" as event_time from \"endorsements\")) union (select \"older_point_id\" as point_id, \"created_at\" as event_time from \"negations\")) union (select \"newer_point_id\" as point_id, \"created_at\" as event_time from \"negations\")) select \"all_events\".point_id as \"point_id\", \"all_events\".event_time as \"event_time\", \n        COALESCE((\n          SELECT SUM(\"cred\")\n          FROM \"endorsements\" AS 'e'\n          WHERE 'e'.\"point_id\" = \"all_events\".point_id\n          AND 'e'.\"created_at\" <= \"all_events\".event_time\n        ), 0)\n       as \"point_cred\", \n        COALESCE((\n          SELECT SUM(\"cred\")\n          FROM \"endorsements\" AS 'e'\n          JOIN \"negations\" AS 'n' ON (\n            'e'.\"point_id\" IN (\n              'n'.\"newer_point_id\", \n              'n'.\"older_point_id\"\n            )\n          )\n          WHERE \n            'n'.\"created_at\" <= \"all_events\".event_time\n            AND 'e'.\"created_at\" <= \"all_events\".event_time\n            AND (\n              ('n'.\"older_point_id\" = \"all_events\".point_id)\n              OR \n              ('n'.\"newer_point_id\" = \"all_events\".point_id)\n            )\n        ), 0)\n       as \"negations_cred\", \n        CASE \n          WHEN (\n            COALESCE((\n              SELECT SUM(\"cred\")\n              FROM \"endorsements\" AS 'e'\n              WHERE 'e'.\"point_id\" = \"all_events\".point_id\n              AND 'e'.\"created_at\" <= \"all_events\".event_time\n            ), 0) +\n            COALESCE((\n              SELECT SUM(\"cred\")\n              FROM \"endorsements\" AS 'e'\n              JOIN \"negations\" AS 'n' ON (\n                'e'.\"point_id\" IN (\n                  'n'.\"newer_point_id\", \n                  'n'.\"older_point_id\"\n                )\n              )\n              WHERE \n                'n'.\"created_at\" <= \"all_events\".event_time\n                AND 'e'.\"created_at\" <= \"all_events\".event_time\n                AND (\n                  ('n'.\"older_point_id\" = \"all_events\".point_id)\n                  OR \n                  ('n'.\"newer_point_id\" = \"all_events\".point_id)\n                )\n            ), 0)\n          ) = 0 THEN 0\n          ELSE ROUND(\n            (\n              COALESCE((\n                SELECT SUM(\"cred\")\n                FROM \"endorsements\" AS 'e'\n                WHERE 'e'.\"point_id\" = \"all_events\".point_id\n                AND 'e'.\"created_at\" <= \"all_events\".event_time\n              ), 0)::numeric /\n              (\n                COALESCE((\n                  SELECT SUM(\"cred\")\n                  FROM \"endorsements\" AS 'e'\n                  WHERE 'e'.\"point_id\" = \"all_events\".point_id\n                  AND 'e'.\"created_at\" <= \"all_events\".event_time\n                ), 0) +\n                COALESCE((\n                  SELECT SUM(\"cred\")\n                  FROM \"endorsements\" AS 'e'\n                  JOIN \"negations\" AS 'n' ON (\n                    'e'.\"point_id\" IN (\n                      'n'.\"newer_point_id\", \n                      'n'.\"older_point_id\"\n                    )\n                  )\n                  WHERE \n                    'n'.\"created_at\" <= \"all_events\".event_time\n                    AND 'e'.\"created_at\" <= \"all_events\".event_time\n                    AND (\n                      ('n'.\"older_point_id\" = \"all_events\".point_id)\n                      OR \n                      ('n'.\"newer_point_id\" = \"all_events\".point_id)\n                    )\n                ), 0)\n              )::numeric * 100\n            )::numeric,\n            0\n          )::integer\n        END\n       as \"favor\" from \"all_events\" order by \"all_events\".point_id, \"all_events\".event_time",
      "name": "point_favor_history",
      "schema": "public",
      "isExisting": false,
      "materialized": true
    }
  },
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}